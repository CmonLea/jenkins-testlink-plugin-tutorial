<?xml version="1.0" encoding="UTF-8"?> 
<chapter id="chapter.5">

	<title>Jenkins Configuration</title>
	
	<section>
	
		<title>Installing Jenkins</title>
		
		<para>Download <emphasis>jenkins.war</emphasis> from 
		<ulink url="http://www.jenkins-ci.org">http://www.jenkins-ci.org</ulink>. 
		Now open a terminal and execute	<command>java -jar jenkins.war</command>. 
		This will initiate Jenkins in port 8080 by default (if you need to 
		change that port, use <emphasis>--httpPort=9999</emphasis>).</para>
		
		<para>Jenkins creates a default workspace for you at <emphasis>~/.jenkins</emphasis> 
		or it uses the folder specified in <emphasis>JENKINS_HOME</emphasis> 
		environment variable.</para>
	
		<para>
			<mediaobject id="jenkins_001_02">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_001.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
	
		<para>Go to <ulink url="http://localhost:8080">http://localhost:8080</ulink> 
		to check if your installation is working. We will call this page as	
		main screen from now on.</para>
	
	</section>
	
	<section>
		
		<title>Installing and configuring Jenkins TestLink Plug-in</title>
		
		<para>The plug-ins in Jenkins are distributed from a central update 
		site. Select the option <emphasis>Manage Jenkins</emphasis> in the left 
		menu and look for the <emphasis>Manage Plugins</emphasis> option. 
		Clicking on <emphasis>Available</emphasis> will bring you the list of 
		plug-ins ready to be installed in your Jenkins installation.</para>
		
		<para>Just check the checkbox besides the plug-in name on the list 
		and click on <emphasis>Install</emphasis> to install the plug-in. 
		Jenkins will download and install the 
		plug-in automatically for you, however you will have to 
		restart for the plug-in to be enabled.</para>
		
		<para>
			<mediaobject id="jenkins_002">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_002.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<para>
			<mediaobject id="jenkins_003">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_003.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<para>After you have already restarted your Jenkins, 
		go to <emphasis>Manage Jenkins</emphasis> again, <emphasis>Configure System</emphasis> 
		option and look for the TestLink 
		section. Fill the TestLink configuration form 
		with a name for your TestLink installation, 
		the <acronym>URL</acronym> of the <acronym>XML-RPC API</acronym> and your 
		<emphasis>devKey</emphasis>.</para>
		
		<para>
			<mediaobject id="jenkins_004">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_004.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<para>By default the TestLink 
		<acronym>XML-RPC API</acronym> can be found at 
		<emphasis>http://&lt;host>:&lt;port>/lib/api/xmlrpc.php</emphasis>. 
		The <emphasis>devKey</emphasis> can	be obtained by entering 
		TestLink, clicking on 
		<emphasis>My Settings</emphasis> (top menu) 
		and generating a new <emphasis>devKey</emphasis>, if there is none yet. 
		If you cannot see the <acronym>API</acronym> interface section in 
		<emphasis>My Settings</emphasis> page, then it is 
		very likely that you didn't enable it yet. 
		Go back to <xref linkend="chapter.4" /> to review your work.</para>
		
	</section>
	
	<section>
	
		<title>Creating a job in Jenkins</title>
		
		<para>In order to create a new job all that you need to do is just click 
		on <emphasis>New Job</emphasis> and give it a name. Choose the option to create a free-style 
		project.</para>
		
		<para>
			<mediaobject id="jenkins_005">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_005.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<para>For the sake of simplicity, we will point the job workspace to 
		our Java project folder. In a real-world project it is more likely 
		that you will have your test project stored in some kind of 
		<acronym>SCM</acronym>, like SVN or 
		git. To change the default workspace location, 
		look for <emphasis>Advanced Project Options</emphasis> and expand its 
		options by clicking on <emphasis>Advanced...</emphasis>. Then mark 
		<emphasis>Use custom workspace</emphasis> and fill the input text 
		with the location of the test project. If you didn't download the 
		sample test project used in this guide, you can find it in 
		<ulink url="https://github.com/kinow/jenkins-testlink-plugin-the-definitive-guide/blob/master/sample-test-project.tar.gz?raw=true">
		https://github.com/kinow/jenkins-testlink-plugin-the-definitive-guide/blob/master/sample-test-project.tar.gz?raw=true</ulink>.</para>
	
		<para>
			<mediaobject id="jenkins_006">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_006.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
	
		<para>Click on <emphasis>Add build step</emphasis> button to expand 
		its options and then click on <emphasis>Invoke TestLink</emphasis>. 
		It will show a new form with options to integrate your 
		Jenkins job with TestLink. 
		Fill this form with the following information created in 
		<xref linkend="chapter.4" />.</para>
		
		<para>Configure your job as follows:</para>
		
		<para>
			<itemizedlist>
				<listitem>
					<para>TestLink version: select the version 
			that you created in the global configuration.</para>
				</listitem>
				<listitem>
					<para>Test Project name: My first project</para>
				</listitem>
				<listitem>
					<para>Test Plan name: My first plan</para>
				</listitem>
				<listitem>
					<para>Build name: My first build (or any other name that you want)</para>
				</listitem>
				<listitem>
					<para>Custom fields: Java class</para>
				</listitem>
				<listitem>
					<para>Single test command: leave it blank</para>
				</listitem>
				<listitem>
					<para>Iterative test command: mvn -e -X test -Dtest=$TESTLINK_TESTCASE_JAVA_CLASS</para>
				</listitem>
				<listitem>
					<para>TestLink automated tests key custom field: Java class</para>
				</listitem>
				<listitem>
					<para>TestNG XML report files pattern: target/**/testng-results.xml</para>
				</listitem>
			</itemizedlist>
		</para>
		
		<para>
			<mediaobject id="jenkins_007_01">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_007.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<para>Click on <emphasis>Save</emphasis> to persist your job to your disk (it is saved as XML).</para>
	
	</section>
	
	<section>
	
		<title>Explaining the Job configuration parameters</title>
		
		<para>
			<mediaobject id="jenkins_007_02">
				<imageobject role="html">
					<imagedata align="center" fileref="../media/jenkins_007.png" width="100%" contentdept="100%" format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
		
		<section>
		
			<title>TestLink version</title>
			
			<para>This is the name of your TestLink 
			installation in Jenkins global configuration.</para>
			
		</section>
		
		<section>
		
			<title>Test Project name</title>
			
			<para>This is the name of your <emphasis>Test Project</emphasis> 
			in TestLink.</para>
			
		</section>
		
		<section>
		
			<title>Test Plan name</title>
			
			<para>This is the name of your <emphasis>Test Plan</emphasis> 
			in TestLink.</para>
			
		</section>
		
		<section>
		
			<title>Build name</title>
			
			<para>This is the name of your <emphasis>Build</emphasis> 
			in TestLink. You can use environment 
			variables in this field following the pattern ${VARIABLE_NAME}.</para>
			
		</section>
		
		<section>
		
			<title>Custom fields</title>
			
			<para>This is a comma separated list of <emphasis>Custom Fields</emphasis> 
			in TestLink.</para>
			
		</section>
		
		<section>
		
			<title>Single test command</title>
			
			<para>This command is executed once on the slave node of Jenkins (master 
			if your Jenkins is not distributed). This field can be used 
			to execute test suites, for example. You can use 
			environment variables in this field.</para>
			
		</section>
		
		<section>
		
			<title>Iterative test command</title>
			
			<para>This command is executed for each automated test case 
			within your Test Plan in TestLink. 
			You can use environment variables in this field.</para>
			
		</section>
		
		<section>
		
			<title>TestLink automated tests key custom field</title>
			
			<para>This is the name of the custom field that the plug-in will 
			use to match a <emphasis>Test Result</emphasis> with an automated test case from 
			TestLink. The way that this field is 
			used when the plug-in is scanning the test results depends on the 
			<emphasis>Test Strategy</emphasis>.</para>
			
		</section>
		
		<section>
		
			<title>JUnit, TestNG and 
			<acronym>TAP</acronym> report files patterns.</title>
			
			<para>The plug-in uses these patterns to find test results of your 
			tests execution (single test command or iterative). You can use multiple 
			patterns at once, but it may lead to inconsistencies in 
			your test results in TestLink.</para>
			
		</section>
		
		<section>
		
			<title>Transactional execution?</title>
			
			<para>If this option is marked and any test fails, all remaining 
			tests will be marked as <emphasis>Blocked</emphasis> in TestLink.</para>
			
		</section>
		
		<section>
		
			<title>Environment variables</title>
			
			<para>The plug-in retrieves all the information from TestLink for your 
			Test Project, Test Plan, Build and automated Test Cases. You can use any 
			of this information to execute your tests. Jenkins 
			itself provides the <emphasis>Environment Variables</emphasis>, plus 
			<emphasis>Build Environment Variables</emphasis> (such as 
			<emphasis>BUILD_ID</emphasis>, which holds the date time of your 
			job). The plug-in injects the information retrieved from 
			TestLink as environment variables. </para>
			
			<para>This way you can use the value of the <emphasis>Java class</emphasis> 
			custom field value that you created in <xref linkend="chapter.4" /> 
			in your iterative test command.</para>
			
			<para>
				<programlisting><![CDATA[mvn -e -X test -Dtest=$TESTLINK_TESTCASE_JAVA_CLASS]]></programlisting>
			</para>
			
			<para>As you can see, our test command uses the <emphasis>Java class</emphasis> 
			custom field value to specify the name of the test to 
			Maven (Maven Surefire Plug-in, actually). 
			Below you will find a list with the information that the plug-in 
			makes available for your job configuration. As custom fields names 
			may vary, the strategy used is capitalize the custom field name, 
			replace spaces with <emphasis>_</emphasis> and append it to 
			<emphasis>TESTLINK_TESTCASE_</emphasis>, which represents 
			information of a Test Case in TestLink.</para>
			
			<para>
				<itemizedlist>
					<listitem>
						<para>TESTLINK_TESTCASE_ID</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTCASE_NAME</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTCASE_TESTPROJECTID</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTCASE_AUTHOR</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTCASE_SUMMARY</para>
					</listitem>
					<listitem>
						<para>TESTLINK_BUILD_NAME</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTPLAN_NAME</para>
					</listitem>
					<listitem>
						<para>TESTLINK_TESTCASE_$CUSTOM_FIELD_NAME</para>
					</listitem>
				</itemizedlist>
			</para>
			
		</section>    
		
	</section>
	
</chapter>